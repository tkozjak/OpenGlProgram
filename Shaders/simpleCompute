#version 440 compatibility

layout(local_size_x = 32, local_size_y = 1) in;

layout(rgba32f, binding = 0) uniform image2D img_output;

shared uint total_sum;

void main() {

    // init shared variable to 0 (all threads do this)
    total_sum = 0;
    barrier();

    // set indices ( we start with 1 )
    uint my_first_i = gl_LocalInvocationIndex * 10 + 1;
    uint my_last_i = ( gl_LocalInvocationIndex + 1 ) * 10 ;
    uint my_sum = 0;

    // calculate sums
    for( uint my_i = my_first_i; my_i <= my_last_i; my_i++){
        my_sum += my_i;
    }

    // base pixel colour for image
    vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

    // get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 local_coordinates = ivec2(gl_LocalInvocationID.xy);

    int lim = 16;

    // paint pixels
    if( local_coordinates.x < lim )
    pixel.x = 1.0;
    else if ( local_coordinates.x >= lim )
    pixel.y = 1.0;
    else
    pixel.z = 1.0;

    // add local sums to shared memory
    atomicAdd( total_sum, my_sum );
    memoryBarrier();


    // output to a specific pixel in the image
    imageStore(img_output, pixel_coords, vec4(pixel.xyz, total_sum));
}
